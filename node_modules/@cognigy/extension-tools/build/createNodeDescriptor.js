"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeDescriptor = void 0;
exports.createNodeDescriptor = (params) => {
    var _a, _b, _c, _d;
    const { _id, appearance, behavior, constraints, defaultLabel, dependencies, fields, sections, form, parentType, preview, summary, tags, tokens, type, } = params;
    return {
        _id,
        type,
        parentType: parentType || null,
        defaultLabel: defaultLabel !== null && defaultLabel !== void 0 ? defaultLabel : type,
        summary: summary !== null && summary !== void 0 ? summary : '',
        appearance: {
            showIcon: true,
            color: "#3D9FFF",
            textColor: 'black',
            variant: 'regular',
            ...appearance,
        },
        behavior: {
            stopping: false,
            entrypoint: false,
            ...behavior,
        },
        constraints: {
            creatable: true,
            deletable: true,
            editable: true,
            collapsable: false,
            childFlowCreatable: false,
            movable: true,
            ...constraints,
            placement: {
                predecessor: {
                    ...(_a = constraints === null || constraints === void 0 ? void 0 : constraints.placement) === null || _a === void 0 ? void 0 : _a.predecessor
                },
                successor: {
                    ...(_b = constraints === null || constraints === void 0 ? void 0 : constraints.placement) === null || _b === void 0 ? void 0 : _b.successor
                },
                children: {
                    ...((_d = (_c = constraints === null || constraints === void 0 ? void 0 : constraints.placement) === null || _c === void 0 ? void 0 : _c.children) !== null && _d !== void 0 ? _d : { whitelist: [] })
                },
            },
        },
        dependencies: {
            children: [],
            ...dependencies,
        },
        fields: fields || [],
        sections: sections || [],
        form: form || [],
        preview,
        tags: tags || [],
        tokens: tokens || [],
        function: params.function || null
    };
};
